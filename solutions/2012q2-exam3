$Id: 2012q2-test3,v 1.3 2012-06-07 17:57:24-07 - - $
Answers to 2012q2-test3, page 1

________________________________________________________________________
Question 1.

for (int i = 1; i < argc; ++i) vs.push_back (argv[i]);
or:
for (char **p = argv + 1; p != argv + argc; ++p) vs.push_back (argv[i]);

________________________________________________________________________
Question 2.

template <typename itor_t>
void swapper (const itor_t &itor1, const itor_t &itor2) {
   typeof (*itor1) tmp = *itor1;
   *itor1 = *itor2;
   *itor2 = tmp;
}

________________________________________________________________________
Question 3.

template <typename biitor_t>
void xreverse (const biitor_t &begin, const biitor_t &end) {
   biitor_t end1 (end);
   for (biitor_t begin1 = begin; begin1 != end1; ++begin1) {
      --end1;
      if (begin1 == end1) break;
      swapper (*begin1, *end1);
   }
}

________________________________________________________________________
Question 4.

template <typename src_itor, typename dst_itor>
void copy (const src_itor &begin, const src_itor &end,
           const dst_itor &dbegin) {
   dst_itor dst (dbegin);
   for (src_itor itor = begin; itor != end; ++itor) *dst++ = *itor;
}


Answers to 2012q2-test3, page 2

________________________________________________________________________
Question 5.

ServerSocket socket = new ServerSocket (8888);
for (;;) {
   Socket client = socket.accept();
   Scanner in = new Scanner (client.getInputStream());
   String line = in.nextLine();
   out.printf ("%s: %s%n", client.getInetAddress(), line);
   client.close();
}

________________________________________________________________________
Question 6.

Socket socket = new Socket ("localhost", 8888);
PrintWriter out = new PrintWriter (socket.getOutputStream());
for (String arg: args) out.printf (" %s", arg);
out.printf ("%n");
out.flush();
socket.close();

________________________________________________________________________
Question 7.

class click implements ActionListener {
   public void actionPerformed (ActionEvent event) {
      out.printf ("Click!%n");
   }
}


Answers to 2012q2-test3, page 3

________________________________________________________________________
Question 8.

+-------------------------------+-------------------------------+
|class foo {void f(); }         |class stack<item_t> {          |
|class bar: public foo {        |void push (item_t); }          |
|void f(); }                    |                               |

 universal inheritance           universal template

+-------------------------------+-------------------------------+
|int add (int x, int y);        |double f (double x);           |
|double add (double x,          |f (6);                         |
|double y);                     |                               |

 ad hoc overloading              ad hoc conversion

________________________________________________________________________
Question 9.

template <typename item_t>
void list<item_t>::push_back (const item_t &item) {
   node *tmp = new node (item);
   if (head == NULL) {
      head = tail = tmp;
   }else {
      tail->next = tmp;
      tmp->prev = tail;
      tail = tmp;
   }
}

________________________________________________________________________
Question 10.

for (list<string>::const_iterator itor = ls.begin();
     itor != ls.end(); ++itor) {
   cout << *itor << endl;
}

________________________________________________________________________
Question 11.

template <typename itor_t, typename Pred>
itor_t find1 (const itor_t &begin, const itor_t &end, Pred pred) { 
   for (itor_t itor = begin; itor != end; ++itor) {
      if (pred (*itor)) return itor;
   }
   return end;
}


Answers to 2012q2-test3, page 4

 1.    (D) vector<stack<int>>

 2.    (C) Runnable

 3.    (D) the last non-daemon thread terminates .

 4.    (D) v.end() == b + n

 5.    (B) f(*i)

 6.    (A) JFrame

 7.    (A) operator()

 8.    (A) $ O ( 1 ) $

 9.    (A) overloading

10.    (C) red/black binary search tree

11.    (B) memory leak


Answers to 2012q2-test3, page 5

 1.    (C) race condition

 2.    (C) void run()

 3.    (B) direct access

 4.    (A) daemon

 5.    (D) virtual

 6.    (D) valgrind

 7.    (C) synchronized

 8.    (B) heap

 9.    (C) $<

10.    (A) void f (const foo &x);

11.    (C) Simula 67

